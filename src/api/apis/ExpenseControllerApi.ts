/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Expense,
  ExpenseCategory,
  ExpenseDto,
} from '../models/index';
import {
    ExpenseFromJSON,
    ExpenseToJSON,
    ExpenseCategoryFromJSON,
    ExpenseCategoryToJSON,
    ExpenseDtoFromJSON,
    ExpenseDtoToJSON,
} from '../models/index';

export interface AddExpenseRequest {
    expense: Expense;
}

export interface DeleteExpenseRequest {
    id: number;
}

export interface FindExpenseByIdRequest {
    id: number;
}

export interface UpdateExpenseRequest {
    id: number;
    expense: Expense;
}

/**
 * 
 */
export class ExpenseControllerApi extends runtime.BaseAPI {

    /**
     */
    async addExpenseRaw(requestParameters: AddExpenseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Expense>> {
        if (requestParameters['expense'] == null) {
            throw new runtime.RequiredError(
                'expense',
                'Required parameter "expense" was null or undefined when calling addExpense().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/expenses`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ExpenseToJSON(requestParameters['expense']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExpenseFromJSON(jsonValue));
    }

    /**
     */
    async addExpense(requestParameters: AddExpenseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Expense> {
        const response = await this.addExpenseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteExpenseRaw(requestParameters: DeleteExpenseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteExpense().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/expenses/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async deleteExpense(requestParameters: DeleteExpenseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.deleteExpenseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async findAllExpenseCategoriesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ExpenseCategory>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/expenses/categories`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ExpenseCategoryFromJSON));
    }

    /**
     */
    async findAllExpenseCategories(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ExpenseCategory>> {
        const response = await this.findAllExpenseCategoriesRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async findAllExpensesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ExpenseDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/expenses`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ExpenseDtoFromJSON));
    }

    /**
     */
    async findAllExpenses(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ExpenseDto>> {
        const response = await this.findAllExpensesRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async findExpenseByIdRaw(requestParameters: FindExpenseByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Expense>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling findExpenseById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/expenses/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExpenseFromJSON(jsonValue));
    }

    /**
     */
    async findExpenseById(requestParameters: FindExpenseByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Expense> {
        const response = await this.findExpenseByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateExpenseRaw(requestParameters: UpdateExpenseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Expense>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateExpense().'
            );
        }

        if (requestParameters['expense'] == null) {
            throw new runtime.RequiredError(
                'expense',
                'Required parameter "expense" was null or undefined when calling updateExpense().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/expenses/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ExpenseToJSON(requestParameters['expense']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExpenseFromJSON(jsonValue));
    }

    /**
     */
    async updateExpense(requestParameters: UpdateExpenseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Expense> {
        const response = await this.updateExpenseRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
