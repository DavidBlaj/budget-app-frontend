/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Saving,
} from '../models/index';
import {
    SavingFromJSON,
    SavingToJSON,
} from '../models/index';

export interface AddSavingRequest {
    saving: Saving;
}

export interface DeleteSavingRequest {
    id: number;
}

export interface FindSavingByIdRequest {
    id: number;
}

export interface UpdateSavingRequest {
    id: number;
    saving: Saving;
}

/**
 * 
 */
export class SavingControllerApi extends runtime.BaseAPI {

    /**
     */
    async addSavingRaw(requestParameters: AddSavingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Saving>> {
        if (requestParameters['saving'] == null) {
            throw new runtime.RequiredError(
                'saving',
                'Required parameter "saving" was null or undefined when calling addSaving().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/savings`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SavingToJSON(requestParameters['saving']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SavingFromJSON(jsonValue));
    }

    /**
     */
    async addSaving(requestParameters: AddSavingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Saving> {
        const response = await this.addSavingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteSavingRaw(requestParameters: DeleteSavingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteSaving().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/savings/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async deleteSaving(requestParameters: DeleteSavingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.deleteSavingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async findAllSavingsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Saving>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/savings/savings`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SavingFromJSON));
    }

    /**
     */
    async findAllSavings(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Saving>> {
        const response = await this.findAllSavingsRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async findSavingByIdRaw(requestParameters: FindSavingByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Saving>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling findSavingById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/savings/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SavingFromJSON(jsonValue));
    }

    /**
     */
    async findSavingById(requestParameters: FindSavingByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Saving> {
        const response = await this.findSavingByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateSavingRaw(requestParameters: UpdateSavingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Saving>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateSaving().'
            );
        }

        if (requestParameters['saving'] == null) {
            throw new runtime.RequiredError(
                'saving',
                'Required parameter "saving" was null or undefined when calling updateSaving().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/savings/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SavingToJSON(requestParameters['saving']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SavingFromJSON(jsonValue));
    }

    /**
     */
    async updateSaving(requestParameters: UpdateSavingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Saving> {
        const response = await this.updateSavingRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
