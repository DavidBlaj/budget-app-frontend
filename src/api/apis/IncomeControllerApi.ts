/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Income,
  IncomeCategory,
} from '../models/index';
import {
    IncomeFromJSON,
    IncomeToJSON,
    IncomeCategoryFromJSON,
    IncomeCategoryToJSON,
} from '../models/index';

export interface AddIncomeRequest {
    income: Income;
}

export interface DeleteIncomeRequest {
    id: number;
}

export interface FindIncomeByIdRequest {
    id: number;
}

export interface UpdateIncomeRequest {
    id: number;
    income: Income;
}

/**
 * 
 */
export class IncomeControllerApi extends runtime.BaseAPI {

    /**
     */
    async addIncomeRaw(requestParameters: AddIncomeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Income>> {
        if (requestParameters['income'] == null) {
            throw new runtime.RequiredError(
                'income',
                'Required parameter "income" was null or undefined when calling addIncome().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/incomes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IncomeToJSON(requestParameters['income']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IncomeFromJSON(jsonValue));
    }

    /**
     */
    async addIncome(requestParameters: AddIncomeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Income> {
        const response = await this.addIncomeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteIncomeRaw(requestParameters: DeleteIncomeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteIncome().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/incomes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async deleteIncome(requestParameters: DeleteIncomeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.deleteIncomeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async findAllIncomeCategoriesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<IncomeCategory>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/incomes/categories`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(IncomeCategoryFromJSON));
    }

    /**
     */
    async findAllIncomeCategories(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<IncomeCategory>> {
        const response = await this.findAllIncomeCategoriesRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async findAllIncomesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Income>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/incomes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(IncomeFromJSON));
    }

    /**
     */
    async findAllIncomes(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Income>> {
        const response = await this.findAllIncomesRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async findIncomeByIdRaw(requestParameters: FindIncomeByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Income>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling findIncomeById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/incomes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IncomeFromJSON(jsonValue));
    }

    /**
     */
    async findIncomeById(requestParameters: FindIncomeByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Income> {
        const response = await this.findIncomeByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateIncomeRaw(requestParameters: UpdateIncomeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Income>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateIncome().'
            );
        }

        if (requestParameters['income'] == null) {
            throw new runtime.RequiredError(
                'income',
                'Required parameter "income" was null or undefined when calling updateIncome().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/incomes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: IncomeToJSON(requestParameters['income']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IncomeFromJSON(jsonValue));
    }

    /**
     */
    async updateIncome(requestParameters: UpdateIncomeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Income> {
        const response = await this.updateIncomeRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
